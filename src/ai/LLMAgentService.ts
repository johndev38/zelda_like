import { VectorCharacter } from '../characters/VectorCharacter';

// D√©finition des types pour le contexte et les actions
export type NPCAction = 
    | "MOVE_LEFT" 
    | "MOVE_RIGHT" 
    | "MOVE_UP" 
    | "MOVE_DOWN" 
    | "ATTACK_PLAYER" 
    | "INTERACT_NPC" 
    | "IDLE"
    | "PATROL";

export interface NPCContext {
    id: string;
    type: string;
    x: number;
    y: number;
    health: number;
    nearbyNPCs: { id: string; type: string; x: number; y: number; distance: number }[];
    player: { x: number; y: number; distance: number } | null;
    visibleObstacles: { x: number; y: number; width: number; height: number; distance: number }[];
    lastAction: NPCAction | null;
    canAttack: boolean;
}

export class LLMAgentService {
    private apiUrl = 'http://localhost:1234/v1/chat/completions';
    private apiKey = 'lm-studio'; // Cl√© API n√©cessaire
    private debugMode = true; // Activer le mode debug
    private offlineMode = true; // Utiliser le mode hors-ligne avec r√©ponses pr√©d√©finies

    constructor() {
        console.log("======== LLMAgentService cr√©√© en MODE HORS-LIGNE ========");
        // Test direct √† la cr√©ation
        setTimeout(() => {
            this.testDirectConnection();
        }, 2000);
    }

    async testDirectConnection() {
        console.log("======== TEST DIRECT DE CONNEXION LLM ========");
        
        const url = 'http://localhost:1234/v1/models';
        
        try {
            // Test direct avec fetch
            console.log(`Appel direct √† ${url}...`);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                mode: 'cors',
                credentials: 'omit'
            });
            
            console.log(`R√©ponse re√ßue avec statut ${response.status}`);
            
            if (response.ok) {
                const data = await response.json();
                console.log("Donn√©es re√ßues:", data);
                console.log("TEST DIRECT R√âUSSI ‚úÖ");
                
                // Cr√©er un √©l√©ment DOM pour afficher le r√©sultat
                this.createStatusElement("CONNEXION LLM OK ‚úÖ", "green");
            } else {
                console.error(`Erreur ${response.status}: ${response.statusText}`);
                console.log("TEST DIRECT √âCHOU√â ‚ùå");
                
                // Cr√©er un √©l√©ment DOM pour afficher l'erreur
                this.createStatusElement(`ERREUR LLM: ${response.status} ‚ùå`, "red");
            }
        } catch (error) {
            console.error("Erreur de test direct:", error);
            console.log("TEST DIRECT √âCHOU√â ‚ùå");
            
            // Cr√©er un √©l√©ment DOM pour afficher l'erreur
            this.createStatusElement(`ERREUR CORS: V√©rifiez que le serveur LLM a les bons en-t√™tes CORS ‚ùå`, "red");
            
            // Essayer une approche alternative pour v√©rifier si le serveur r√©pond
            this.testWithProbe();
        }
        
        console.log("======== FIN TEST DIRECT ========");
    }
    
    // M√©thode alternative pour tester si le serveur est en cours d'ex√©cution
    private async testWithProbe() {
        console.log("Tentative de sonde simple vers le serveur LLM...");
        try {
            // Mode no-cors - ne peut pas lire la r√©ponse mais peut d√©tecter si le serveur r√©pond
            const probeResponse = await fetch('http://localhost:1234/', {
                method: 'GET',
                mode: 'no-cors'
            });
            
            console.log("Le serveur semble r√©pondre mais a besoin de configuration CORS");
            this.createStatusElement("SERVEUR LLM D√âTECT√â MAIS CONFIGURATION CORS REQUISE", "orange");
        } catch (error) {
            console.error("Le serveur LLM n'est pas accessible:", error);
            this.createStatusElement("SERVEUR LLM NON ACCESSIBLE", "red");
        }
    }
    
    // Affiche un √©l√©ment de statut √† l'√©cran
    private createStatusElement(message: string, color: string) {
        const existingStatus = document.getElementById('llm-status');
        if (existingStatus) {
            existingStatus.textContent = message;
            existingStatus.style.color = color;
            return;
        }
        
        const statusElement = document.createElement('div');
        statusElement.id = 'llm-status';
        statusElement.textContent = message;
        statusElement.style.position = 'fixed';
        statusElement.style.bottom = '10px';
        statusElement.style.left = '10px';
        statusElement.style.padding = '5px 10px';
        statusElement.style.backgroundColor = 'black';
        statusElement.style.color = color;
        statusElement.style.fontWeight = 'bold';
        statusElement.style.fontFamily = 'Arial, sans-serif';
        statusElement.style.zIndex = '10000';
        statusElement.style.border = `2px solid ${color}`;
        statusElement.style.borderRadius = '5px';
        
        document.body.appendChild(statusElement);
    }

    // M√©thode pour obtenir la prochaine action d'un PNJ via l'API LLM
    async getNPCAction(context: NPCContext): Promise<string> {
        console.log(`[LLM ü§ñ] Requ√™te pour ${context.id} (${context.type})`);
        
        // Si en mode hors-ligne, g√©n√©rer une r√©ponse locale
        if (this.offlineMode) {
            return this.getOfflineResponse(context);
        }
        
        // Log tr√®s visible dans la console
        console.log("====================================================");
        console.log(`[LLM ü§ñ] D√âBUT REQU√äTE POUR ${context.id} (${context.type})`);
        console.log("====================================================");
        
        const prompt = this.buildPrompt(context);
        
        // Essayer de r√©cup√©rer la sc√®ne pour afficher des infos de debug
        const gameScene = this.getGameScene(context);
        
        if (this.debugMode) {
            console.log(`[LLM ü§ñ] Prompt envoy√©: 
----- D√âBUT PROMPT -----
${prompt}
----- FIN PROMPT -----`);
        }

        // Param√®tres exacts comme dans le script Python fonctionnel
        const requestBody = {
            model: "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
            messages: [
                { role: "system", content: this.getSystemPrompt() },
                { role: "user", content: prompt }
            ],
            temperature: 0.7
        };

        if (this.debugMode) {
            console.log(`[LLM ü§ñ] Envoi requ√™te √†: ${this.apiUrl}`);
            console.log(`[LLM ü§ñ] Avec API key: ${this.apiKey}`);
            console.log('[LLM ü§ñ] Contenu de la requ√™te:', JSON.stringify(requestBody, null, 2));
        }

        try {
            // 1. TEST DE CONNEXION
            console.log(`[LLM ü§ñ] TEST DE CONNEXION au serveur...`);
            gameScene?.debugDisplay?.log(`Connexion LLM...`);
            
            const testUrl = 'http://localhost:1234/v1/models';
            const testOptions = {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                mode: 'cors' as RequestMode,
                credentials: 'omit' as RequestCredentials
            };
            
            console.log(`[LLM ü§ñ] Requ√™te de test:`, testUrl, testOptions);
            
            let serverAccessible = false;
            
            try {
                const testResponse = await fetch(testUrl, testOptions);
                if (testResponse.ok) {
                    const models = await testResponse.json();
                    console.log(`[LLM ü§ñ] ‚úÖ Serveur accessible, mod√®les disponibles:`, models.data ? models.data.map((m: any) => m.id).join(', ') : 'Aucun');
                    gameScene?.debugDisplay?.log(`LLM connect√© ‚úÖ`);
                    serverAccessible = true;
                } else {
                    console.log(`[LLM ü§ñ] ‚ö†Ô∏è Serveur accessible mais erreur ${testResponse.status} sur /models`);
                    gameScene?.debugDisplay?.log(`Erreur LLM: ${testResponse.status}`);
                }
            } catch (e) {
                console.error(`[LLM ü§ñ] ‚ùå ERREUR lors du test de connexion:`, e);
                gameScene?.debugDisplay?.log(`Erreur connexion LLM`);
                
                // Tentative alternative avec no-cors pour voir si le serveur r√©pond
                try {
                    await fetch('http://localhost:1234/', {
                        method: 'GET',
                        mode: 'no-cors'
                    });
                    console.log(`[LLM ü§ñ] ‚ö†Ô∏è Le serveur semble r√©pondre mais probl√®me CORS`);
                    gameScene?.debugDisplay?.log(`Probl√®me CORS avec LLM`);
                    
                    // On renvoie une action valide avec un message dans la console
                    console.error(`[LLM ü§ñ] ‚ö†Ô∏è CORS bloqu√© - v√©rifiez la configuration du serveur LLM.`);
                    return "IDLE";
                } catch (probeError) {
                    console.error(`[LLM ü§ñ] ‚ùå Le serveur √† ${testUrl} n'est pas accessible!`);
                    gameScene?.debugDisplay?.log(`LLM non accessible!`);
                    return "IDLE";
                }
            }
            
            // Si le serveur n'est pas accessible, on retourne une action par d√©faut
            if (!serverAccessible) {
                return "IDLE";
            }
            
            // 2. ENVOI DE LA REQU√äTE AU LLM
            console.log(`[LLM ü§ñ] ENVOI de la requ√™te chat/completions...`);
            gameScene?.debugDisplay?.log(`Requ√™te LLM envoy√©e...`);
            
            const requestOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify(requestBody),
                mode: 'cors' as RequestMode,
                credentials: 'omit' as RequestCredentials
            };
            
            console.log(`[LLM ü§ñ] Options de requ√™te:`, JSON.stringify(requestOptions, null, 2));

            const response = await fetch(this.apiUrl, requestOptions);
            
            console.log(`[LLM ü§ñ] Statut de r√©ponse re√ßu: ${response.status}`);

            if (!response.ok) {
                const errorText = await response.text();
                console.error(`[LLM ü§ñ] ‚ùå ERREUR API LLM (${response.status}):`, errorText);
                gameScene?.debugDisplay?.log(`Erreur API LLM: ${response.status}`);
                try {
                    const errorJson = JSON.parse(errorText);
                    console.error(`[LLM ü§ñ] D√©tails de l'erreur:`, errorJson.error || errorJson);
                } catch (e) {
                    // Si ce n'est pas du JSON
                }
                return "IDLE";
            }

            console.log(`[LLM ü§ñ] ‚úÖ R√©ponse re√ßue (status: ${response.status})`);
            gameScene?.debugDisplay?.log(`R√©ponse LLM re√ßue ‚úÖ`);
            
            // 3. TRAITEMENT DE LA R√âPONSE
            const responseText = await response.text();
            console.log(`[LLM ü§ñ] R√©ponse brute:`, responseText);
            
            let data;
            try {
                data = JSON.parse(responseText);
            } catch (e) {
                console.error(`[LLM ü§ñ] ‚ùå Erreur de parsing JSON:`, e);
                console.error(`[LLM ü§ñ] Contenu non-JSON re√ßu:`, responseText);
                gameScene?.debugDisplay?.log(`Erreur format r√©ponse`);
                return "IDLE";
            }
            
            if (this.debugMode) {
                console.log('[LLM ü§ñ] R√©ponse compl√®te:', JSON.stringify(data, null, 2));
            }
            
            if (data.choices && data.choices.length > 0) {
                const rawResponse = data.choices[0].message?.content?.trim();
                console.log(`[LLM ü§ñ] R√©ponse brute LLM: "${rawResponse}"`);
                gameScene?.debugDisplay?.log(`LLM r√©pond: ${rawResponse}`);
                
                // Essayer d'extraire une action valide de la r√©ponse
                const actionText = this.extractActionFromResponse(rawResponse);
                if (actionText) {
                    console.log(`[LLM ü§ñ] ‚úÖ Action choisie: ${actionText}`);
                    console.log("====================================================");
                    console.log(`[LLM ü§ñ] FIN REQU√äTE POUR ${context.id}`);
                    console.log("====================================================");
                    return actionText;
                } else {
                    console.warn(`[LLM ü§ñ] ‚ö†Ô∏è Aucune action valide trouv√©e: "${rawResponse}"`);
                    gameScene?.debugDisplay?.log(`R√©ponse invalide!`);
                }
            } else {
                 console.warn("[LLM ü§ñ] ‚ö†Ô∏è Format de r√©ponse inattendu:", data);
                 gameScene?.debugDisplay?.log(`Format LLM invalide`);
            }

        } catch (error) {
            console.error("[LLM ü§ñ] ‚ùå ERREUR CRITIQUE:", error);
            gameScene?.debugDisplay?.log(`Erreur API LLM`);
            
            // Donner plus de d√©tails sur l'erreur
            if (error instanceof TypeError && error.message.includes('fetch')) {
                console.error("[LLM ü§ñ] ‚ùå Probl√®me r√©seau: v√©rifiez que le serveur StudioLLM est bien lanc√© sur le port 1234");
                console.error("[LLM ü§ñ] ‚ùå Essayez d'ouvrir http://localhost:1234/v1/models dans votre navigateur pour v√©rifier");
                gameScene?.debugDisplay?.log(`Erreur r√©seau LLM`);
            }
            if (error instanceof SyntaxError) {
                console.error("[LLM ü§ñ] ‚ùå Erreur de parsing JSON: la r√©ponse n'est pas au bon format");
                gameScene?.debugDisplay?.log(`Erreur format JSON`);
            }
        }

        console.log(`[LLM ü§ñ] ‚ö†Ô∏è Action par d√©faut (IDLE) pour ${context.id}`);
        console.log("====================================================");
        console.log(`[LLM ü§ñ] FIN REQU√äTE POUR ${context.id}`);
        console.log("====================================================");
        return "IDLE";
    }
    
    private getSystemPrompt(): string {
        const possibleActions = ["MOVE_LEFT", "MOVE_RIGHT", "MOVE_UP", "MOVE_DOWN", "ATTACK_PLAYER", "INTERACT_NPC", "IDLE", "PATROL"].join(", ");
        const prompt = `Tu es l'IA d'un personnage non-joueur (PNJ) dans un jeu vid√©o 2D vu de dessus.
Ton objectif est de te comporter de mani√®re cr√©dible en fonction de ton type et de l'environnement.
D√©cris ta prochaine action en choisissant UNIQUEMENT parmi les options suivantes : ${possibleActions}.
Ne r√©ponds RIEN d'autre que l'action choisie.`;

        if (this.debugMode) {
            console.log(`[LLM] System prompt:
----- D√âBUT SYSTEM PROMPT -----
${prompt}
----- FIN SYSTEM PROMPT -----`);
        }
        return prompt;
    }

    private buildPrompt(context: NPCContext): string {
        let prompt = `Contexte actuel du PNJ (ID: ${context.id}, Type: ${context.type}):
Position: (${context.x.toFixed(0)}, ${context.y.toFixed(0)})
Sant√©: ${context.health}
Derni√®re action: ${context.lastAction ?? 'aucune'}
`;

        if (context.player) {
            prompt += `Joueur d√©tect√© √† (${context.player.x.toFixed(0)}, ${context.player.y.toFixed(0)}), distance: ${context.player.distance.toFixed(1)}\n`;
        } else {
            prompt += "Joueur non visible.\n";
        }

        if (context.nearbyNPCs.length > 0) {
            prompt += "Autres PNJ √† proximit√©:\n";
            context.nearbyNPCs.forEach(npc => {
                prompt += `- ID: ${npc.id}, Type: ${npc.type}, Pos: (${npc.x.toFixed(0)}, ${npc.y.toFixed(0)}), Dist: ${npc.distance.toFixed(1)}\n`;
            });
        } else {
            prompt += "Aucun autre PNJ √† proximit√©.\n";
        }
        
        if (context.visibleObstacles.length > 0) {
            prompt += "Obstacles visibles √† proximit√©:\n";
            context.visibleObstacles.forEach(obs => {
                prompt += `- Pos: (${obs.x.toFixed(0)}, ${obs.y.toFixed(0)}), Taille: ${obs.width}x${obs.height}, Dist: ${obs.distance.toFixed(1)}\n`;
            });
        } else {
            prompt += "Aucun obstacle visible √† proximit√©.\n";
        }

        prompt += "\nQuelle est ta prochaine action ?";
        return prompt;
    }
    
    // Nouvelle m√©thode pour extraire une action valide de la r√©ponse du mod√®le
    private extractActionFromResponse(response: string | undefined): NPCAction | null {
        if (!response) return null;
        
        // Liste des actions valides
        const validActions: NPCAction[] = ["MOVE_LEFT", "MOVE_RIGHT", "MOVE_UP", "MOVE_DOWN", "ATTACK_PLAYER", "INTERACT_NPC", "IDLE", "PATROL"];
        
        // V√©rifier d'abord si la r√©ponse est exactement une action valide
        const upperResponse = response.toUpperCase();
        for (const action of validActions) {
            if (upperResponse === action) {
                return action;
            }
        }
        
        // Sinon, chercher une action valide dans la r√©ponse
        for (const action of validActions) {
            if (upperResponse.includes(action)) {
                return action;
            }
        }
        
        // Essayer des correspondances plus floues
        if (upperResponse.includes("LEFT") || upperResponse.includes("GAUCHE")) return "MOVE_LEFT";
        if (upperResponse.includes("RIGHT") || upperResponse.includes("DROITE")) return "MOVE_RIGHT";
        if (upperResponse.includes("UP") || upperResponse.includes("HAUT")) return "MOVE_UP";
        if (upperResponse.includes("DOWN") || upperResponse.includes("BAS")) return "MOVE_DOWN";
        if (upperResponse.includes("ATTACK") || upperResponse.includes("ATTAQUE")) return "ATTACK_PLAYER";
        if (upperResponse.includes("INTERACT") || upperResponse.includes("INTERACT")) return "INTERACT_NPC";
        if (upperResponse.includes("PATROL") || upperResponse.includes("PATROUILLE")) return "PATROL";
        if (upperResponse.includes("IDLE") || upperResponse.includes("RIEN") || upperResponse.includes("ATTENTE")) return "IDLE";
        
        // Aucune correspondance trouv√©e
        return null;
    }
    
    private isValidAction(action: string | undefined): action is NPCAction {
        if (!action) {
            if (this.debugMode) console.log(`[LLM] Action re√ßue est undefined ou vide`);
            return false;
        }
        
        const validActions: Set<string> = new Set(["MOVE_LEFT", "MOVE_RIGHT", "MOVE_UP", "MOVE_DOWN", "ATTACK_PLAYER", "INTERACT_NPC", "IDLE", "PATROL"]);
        const isValid = validActions.has(action);
        
        if (this.debugMode && !isValid) {
            console.log(`[LLM] Action "${action}" n'est pas dans la liste des actions valides [${Array.from(validActions).join(', ')}]`);
        }
        
        return isValid;
    }

    // R√©cup√©rer la sc√®ne pour afficher des messages de debug
    private getGameScene(context: NPCContext): any {
        // On essaie de trouver une r√©f√©rence √† la sc√®ne dans le contexte
        const scene = (context as any).scene;
        return scene;
    }

    // G√©n√®re des r√©ponses sans serveur LLM
    private getOfflineResponse(context: NPCContext): string {
        // Log des param√®tres pour aider au d√©bogage
        console.log("G√©n√©ration r√©ponse hors-ligne pour:", context);
        
        // R√©ponses diff√©rentes selon le type de contexte
        if (context.type === "dialogue_npc") {
            return this.getRandomDialogue(context);
        }
        
        // Pour les actions normales de PNJ
        const actions = ["MOVE_LEFT", "MOVE_RIGHT", "MOVE_UP", "MOVE_DOWN", "IDLE"];
        const randomAction = actions[Math.floor(Math.random() * actions.length)];
        
        // Si le PNJ peut attaquer et que le joueur est proche, possibilit√© d'attaque
        if (context.player && context.player.distance < 100 && context.canAttack) {
            if (Math.random() < 0.3) { // 30% de chance d'attaquer si proche
                return "ATTACK_PLAYER";
            }
        }
        
        // Ajouter un dialogue al√©atoire √† l'action (50% de chance)
        if (Math.random() < 0.5) {
            const dialog = this.getRandomDialogue(context);
            return `${randomAction}|SAY:${dialog}`;
        }
        
        return randomAction;
    }
    
    // G√©n√®re des dialogues al√©atoires selon le contexte
    private getRandomDialogue(context: NPCContext): string {
        const name = context.id;
        
        // Dialogues g√©n√©riques
        const genericDialogues = [
            "Bonjour aventurier! Belle journ√©e, n'est-ce pas?",
            "Sois le bienvenu dans notre village.",
            "As-tu visit√© la for√™t au nord? On dit qu'elle cache des secrets.",
            "Je me demande ce qui se passe dans le royaume ces temps-ci.",
            "J'ai entendu parler d'√©tranges cr√©atures qui r√¥dent la nuit.",
            "Tu sembles fatigu√© de ton voyage. Prends un peu de repos.",
            "Les temps sont durs pour tout le monde, mais nous r√©sistons.",
            "Si tu cherches des provisions, parle au marchand pr√®s de la place.",
            "M√©fie-toi des bandits sur la route de l'est.",
            "Il para√Æt que le roi pr√©pare une grande annonce."
        ];
        
        // Dialogues sp√©cifiques selon le personnage
        if (name.includes("Marchand")) {
            const merchantDialogues = [
                "J'ai les meilleures marchandises de toute la r√©gion!",
                "Acheter, vendre, √©changer - tout est possible ici.",
                "Ces √©p√©es viennent directement des forges royales!",
                "Mes potions sont concoct√©es par les meilleurs alchimistes.",
                "Si tu as des objets rares, je suis toujours int√©ress√©."
            ];
            return merchantDialogues[Math.floor(Math.random() * merchantDialogues.length)];
        }
        
        if (name.includes("Garde")) {
            const guardDialogues = [
                "Circulez, rien √† voir ici.",
                "Je garde cet endroit jour et nuit.",
                "Un probl√®me avec les bandits? Je m'en occupe.",
                "Mon √©p√©e est pr√™te √† d√©fendre le village.",
                "Signale-moi tout comportement suspect."
            ];
            return guardDialogues[Math.floor(Math.random() * guardDialogues.length)];
        }
        
        // Si proche du joueur, dialogues sp√©cifiques
        if (context.player && context.player.distance < 50) {
            const closeDialogues = [
                "Tu es bien pr√®s! Je peux t'aider?",
                "H√©, fais attention o√π tu marches!",
                "Un peu d'espace personnel, s'il te pla√Æt?",
                "Bonjour! Tu cherches quelque chose en particulier?"
            ];
            return closeDialogues[Math.floor(Math.random() * closeDialogues.length)];
        }
        
        // Dialogue g√©n√©rique par d√©faut
        return genericDialogues[Math.floor(Math.random() * genericDialogues.length)];
    }
} 